from secret import FLAG
sb = (
    0xa7, 0xb0, 0x6d, 0x63, 0x89, 0x1a, 0xbe, 0xc4, 0x3c, 0x42, 0xa1, 0x01, 0x5b, 0xc8, 0x2c, 0x6e,
    0xa4, 0x9c, 0x7c, 0x1e, 0x2a, 0xbd, 0x14, 0xe8, 0x99, 0x20, 0x27, 0x58, 0xac, 0x44, 0x25, 0x91,
    0x16, 0xe0, 0xb5, 0x85, 0xee, 0xcd, 0xae, 0xa5, 0x8c, 0x46, 0x8f, 0xdc, 0x12, 0xa3, 0x33, 0xd5,
    0x93, 0x94, 0x0b, 0x6c, 0x45, 0xfb, 0x9b, 0x75, 0x56, 0xc9, 0x4f, 0x19, 0xfe, 0xb3, 0x1b, 0x97,
    0x2f, 0x0d, 0xbc, 0xeb, 0x71, 0xd0, 0x77, 0x05, 0xa6, 0xe4, 0x30, 0xb9, 0x6f, 0x5e, 0xb2, 0x49,
    0x9d, 0x59, 0x3d, 0x32, 0xcc, 0x35, 0xf1, 0x48, 0x34, 0x84, 0xd3, 0xf9, 0x7b, 0x51, 0xf0, 0xc0,
    0x5a, 0x4d, 0x66, 0xaa, 0x57, 0x54, 0xb7, 0x24, 0x1f, 0x5c, 0x4b, 0xfa, 0xf3, 0xb4, 0xdd, 0x8e,
    0x92, 0x1c, 0xaf, 0xba, 0xcb, 0x10, 0x88, 0xad, 0x81, 0xfd, 0xe2, 0x28, 0x2e, 0xb6, 0x68, 0xe7,
    0xdb, 0x67, 0xff, 0x06, 0x60, 0x5d, 0x82, 0xd4, 0xc6, 0xdf, 0xab, 0x52, 0xf7, 0x13, 0x62, 0x95,
    0x5f, 0x4e, 0xd6, 0xef, 0x39, 0xc3, 0x38, 0xe9, 0x7d, 0xda, 0x04, 0xc1, 0xc2, 0x18, 0xca, 0x41,
    0x21, 0x73, 0x96, 0x70, 0x80, 0x72, 0x78, 0xd9, 0xb1, 0x8a, 0xa0, 0xce, 0xbb, 0xf5, 0x26, 0x64,
    0xd2, 0x36, 0x50, 0xec, 0xde, 0x79, 0x6a, 0xea, 0xcf, 0x86, 0xd8, 0x1d, 0x9e, 0x40, 0x90, 0xf8,
    0x7f, 0x31, 0x55, 0x83, 0x11, 0xf6, 0xbf, 0x69, 0x07, 0xe3, 0x53, 0x4c, 0x2b, 0x23, 0x00, 0x3e,
    0xc5, 0x37, 0x8d, 0xd1, 0x7a, 0xe1, 0x74, 0xe5, 0xc7, 0x08, 0xa9, 0x0a, 0x0f, 0x7e, 0x76, 0x6b,
    0x87, 0x17, 0x98, 0xd7, 0xe6, 0x3b, 0x22, 0xa2, 0x65, 0x09, 0x47, 0x2d, 0x0e, 0xf2, 0x8b, 0x02,
    0xb8, 0xf4, 0xfc, 0x03, 0x9f, 0x3f, 0xed, 0x61, 0x9a, 0x0c, 0xa8, 0x4a, 0x43, 0x3a, 0x15, 0x29
)

rc = (
    0x77, 0x4b, 0x05, 0x02, 0xe3, 0x0f, 0xf2, 0x61,
    0xfc, 0x72, 0xf3, 0xf6, 0xc9, 0xe6, 0x20, 0xc9,
    0xb0, 0xad, 0xb8, 0x1f, 0x71, 0x5d, 0xe9, 0xcb,
    0x35, 0x44, 0x51, 0xde, 0xc9, 0x43, 0x03, 0x66
)

class DA:
    def __init__(self, mk):
        self.nr = 10 if len(mk) == 16 else 12 if len(mk) == 24 else 14 if len(mk) == 32 else exit()
        self._km = self._ek(mk)

    def _ek(self, mk):
        kc = [list(mk[i:i+4]) for i in range(0, len(mk), 4)]
        _is = len(mk) // 4

        i = 1
        while len(kc) < (self.nr + 1) * 4:
            w = list(kc[-1])

            if len(kc) % _is == 0:
                w.append(w.pop(0))
                w = [sb[b] for b in w]
                w[0] ^= rc[i]
                i += 1
            elif len(mk) == 32 and len(kc) % _is == 4:
                w = [sb[b] for b in w]

            w = bytes(i^j for i, j in zip(w, kc[-_is]))
            kc.append(w)

        return [kc[4*i : 4*(i+1)] for i in range(len(kc) // 4)]

    def eb(self, pt):
        assert len(pt) == 16
        x = lambda a: (((a << 1) ^ 0x1B) & 0xFF) if (a & 0x80) else (a << 1)
        ps = [list(pt[i:i+4]) for i in range(0, len(pt), 4)]

        for i in range(4):
            for j in range(4):
                ps[i][j] ^= self._km[0][i][j]

        for i in range(1, self.nr):
            for j in range(4):
                for k in range(4):
                    ps[j][k] = sb[ps[j][k]]

            for j in range(4):
                for k in range(4):
                    ps[j][k] ^= self._km[i][j][k]

            ps[0][2], ps[1][2], ps[2][2], ps[3][2] = ps[2][2], ps[3][2], ps[0][2], ps[1][2]
            ps[0][1], ps[1][1], ps[2][1], ps[3][1] = ps[1][1], ps[2][1], ps[3][1], ps[0][1]
            ps[0][3], ps[1][3], ps[2][3], ps[3][3] = ps[3][3], ps[0][3], ps[1][3], ps[2][3]

            for j in range(4):
                t = ps[j][0] ^ ps[j][1] ^ ps[j][2] ^ ps[j][3]
                u = ps[j][0]
                ps[j][0] ^= t ^ x(ps[j][0] ^ ps[j][1])
                ps[j][1] ^= t ^ x(ps[j][1] ^ ps[j][2])
                ps[j][2] ^= t ^ x(ps[j][2] ^ ps[j][3])
                ps[j][3] ^= t ^ x(ps[j][3] ^ u)

        for i in range(4):
            for j in range(4):
                ps[i][j] = sb[ps[i][j]]


        for i in range(4):
            for j in range(4):
                ps[i][j] ^= self._km[-1][i][j]
                
        ps[0][3], ps[1][3], ps[2][3], ps[3][3] = ps[3][3], ps[0][3], ps[1][3], ps[2][3]
        ps[0][1], ps[1][1], ps[2][1], ps[3][1] = ps[1][1], ps[2][1], ps[3][1], ps[0][1]
        ps[0][2], ps[1][2], ps[2][2], ps[3][2] = ps[2][2], ps[3][2], ps[0][2], ps[1][2]

        return bytes(sum(ps, []))

    def encrypt(self, pt):
        pl = 16 - (len(pt) % 16)
        p = bytes([pl] * pl)
        pb =  pt + p
        bs = []
        for p_b in [pb[i:i+16] for i in range(0, len(pb), 16)]:
            b = self.eb(p_b)
            bs.append(b)
        return b''.join(bs)

if __name__ == '__main__':
    print(DA(b'"SECRETKEYDONTSHARETHISTOANYONE"').encrypt(FLAG).hex())
    # 9e65ce8e1fefcec7e09384b3709a1ca9b50aca476513d390cbe40beb254bd007bf8e79389fd1d3bb11c3cc055d6c3754